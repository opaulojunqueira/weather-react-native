{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState, useEffect } from 'react';\nimport publicIP from 'react-native-public-ip';\nimport axios from 'axios';\nimport { Feather, EvilIcons } from '@expo/vector-icons';\nimport MainCard from \"./components/MainCard\";\nimport InfoCard from \"./components/InfoCard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState, _useState2, darkMode, setDarkMode, _useState3, _useState4, currentTemperature, setCurrentTemperature, _useState5, _useState6, location, setLocation, _useState7, _useState8, currentHour, setcurrentHour, _useState9, _useState10, clientIP, setClientIP, a, _useState11, _useState12, Sensation, setSensation, _useState13, _useState14, Moisture, setMoisture, _useState15, _useState16, Rain, setRain, _useState17, _useState18, Wind, setWind, styles;\n\n  return _regeneratorRuntime.async(function App$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          a = function _a() {\n            var pIP;\n            return _regeneratorRuntime.async(function a$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(publicIP());\n\n                  case 2:\n                    pIP = _context.sent;\n                    setClientIP(pIP);\n                    console.log(clientIP);\n\n                  case 5:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          };\n\n          _useState = useState(true), _useState2 = _slicedToArray(_useState, 2), darkMode = _useState2[0], setDarkMode = _useState2[1];\n          _useState3 = useState('21'), _useState4 = _slicedToArray(_useState3, 2), currentTemperature = _useState4[0], setCurrentTemperature = _useState4[1];\n          _useState5 = useState('BR, São Paulo'), _useState6 = _slicedToArray(_useState5, 2), location = _useState6[0], setLocation = _useState6[1];\n          _useState7 = useState('13:59'), _useState8 = _slicedToArray(_useState7, 2), currentHour = _useState8[0], setcurrentHour = _useState8[1];\n          _useState9 = useState([]), _useState10 = _slicedToArray(_useState9, 2), clientIP = _useState10[0], setClientIP = _useState10[1];\n          _useState11 = useState('27.6'), _useState12 = _slicedToArray(_useState11, 2), Sensation = _useState12[0], setSensation = _useState12[1];\n          _useState13 = useState('77'), _useState14 = _slicedToArray(_useState13, 2), Moisture = _useState14[0], setMoisture = _useState14[1];\n          _useState15 = useState('60'), _useState16 = _slicedToArray(_useState15, 2), Rain = _useState16[0], setRain = _useState16[1];\n          _useState17 = useState('9.4'), _useState18 = _slicedToArray(_useState17, 2), Wind = _useState18[0], setWind = _useState18[1];\n          styles = StyleSheet.create({\n            container: {\n              flex: 1,\n              backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n              alignItems: 'center'\n            },\n            temperature: {\n              alignItems: 'center',\n              flexDirection: 'row',\n              marginTop: 10\n            },\n            temperatureText: {\n              color: darkMode ? '#e0e0e0' : 'black',\n              fontSize: 50\n            },\n            refreshButton: {\n              position: 'absolute',\n              margin: 30,\n              alignSelf: 'flex-start'\n            },\n            cardView: {\n              color: darkMode ? 'black' : 'white',\n              margin: 10,\n              flexDirection: 'row',\n              alignItems: 'center'\n            },\n            cardInfo: {\n              alignItems: 'center',\n              backgroundColor: darkMode ? '#393e54' : '#8f8f8f',\n              borderRadius: 20,\n              width: 370,\n              height: 230\n            },\n            cardInfoText: {\n              color: darkMode ? '#e0e0e0' : 'white',\n              margin: 15,\n              fontSize: 20,\n              fontWeight: 'bold'\n            },\n            cardInfoView: {\n              flexDirection: 'row',\n              flexWrap: 'wrap'\n            },\n            themeButton: {\n              margin: 10,\n              marginLeft: 300,\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: 50,\n              height: 50,\n              borderRadius: 25\n            },\n            squareButton: {\n              backgroundColor: darkMode ? '#f2f2f2' : '#8f8f8f',\n              justifyContent: 'center',\n              borderRadius: 20,\n              marginRight: 20,\n              width: 50,\n              height: 25\n            },\n            circleButton: {\n              backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n              alignSelf: darkMode ? 'flex-end' : 'flex-start',\n              margin: 5,\n              width: 20,\n              height: 20,\n              borderRadius: 50\n            }\n          });\n          return _context2.abrupt(\"return\", _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(TouchableOpacity, {\n              style: styles.refreshButton,\n              children: _jsx(EvilIcons, {\n                name: \"refresh\",\n                size: 30,\n                color: darkMode ? 'white' : 'black'\n              })\n            }), _jsx(Feather, {\n              name: \"sun\",\n              style: {\n                marginTop: 55\n              },\n              size: 40,\n              color: \"orange\"\n            }), _jsxs(View, {\n              style: styles.temperature,\n              children: [_jsx(Text, {\n                style: styles.temperatureText,\n                children: currentTemperature\n              }), _jsx(Text, {\n                style: [styles.temperatureText, {\n                  fontSize: 14\n                }],\n                children: \"\\xB0C\"\n              })]\n            }), _jsxs(Text, {\n              style: [styles.temperatureText, {\n                fontSize: 14\n              }],\n              children: [location, \" | \", currentHour]\n            }), _jsxs(View, {\n              style: styles.cardView,\n              children: [_jsx(MainCard, {\n                title: 'Manhã',\n                temperature: '22',\n                backgroundColor: darkMode ? '#ff873d' : '#cc6e30',\n                icon: 'morning'\n              }), _jsx(MainCard, {\n                title: 'Tarde',\n                temperature: '32',\n                backgroundColor: darkMode ? '#d29600' : '#fcc63f',\n                icon: 'afternoon'\n              }), _jsx(MainCard, {\n                title: 'Noite',\n                temperature: '27',\n                backgroundColor: darkMode ? '#008081' : '#38b7b8',\n                icon: 'night'\n              })]\n            }), _jsxs(View, {\n              style: styles.cardInfo,\n              children: [_jsx(Text, {\n                style: styles.cardInfoText,\n                children: \"Informa\\xE7\\xF5es adicionais\"\n              }), _jsxs(View, {\n                style: styles.cardInfoView,\n                children: [_jsx(InfoCard, {\n                  title: 'Sensação',\n                  value: Sensation + '°C'\n                }), _jsx(InfoCard, {\n                  title: 'Umidade',\n                  value: Moisture + '%'\n                }), _jsx(InfoCard, {\n                  title: 'Proba. de chuva',\n                  value: Rain + '%'\n                }), _jsx(InfoCard, {\n                  title: 'Vel. do vento',\n                  value: Wind + 'km/h'\n                })]\n              })]\n            }), _jsx(View, {\n              style: styles.themeButton,\n              children: _jsx(View, {\n                style: styles.squareButton,\n                children: _jsx(TouchableOpacity, {\n                  style: styles.circleButton,\n                  onPress: function onPress() {\n                    return darkMode ? setDarkMode(false) : setDarkMode(true);\n                  }\n                })\n              })\n            })]\n          }));\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/Projetos/ClimaApp/ClimaApp/App.js"],"names":["StatusBar","useState","useEffect","publicIP","axios","Feather","EvilIcons","MainCard","InfoCard","App","a","pIP","setClientIP","console","log","clientIP","darkMode","setDarkMode","currentTemperature","setCurrentTemperature","location","setLocation","currentHour","setcurrentHour","Sensation","setSensation","Moisture","setMoisture","Rain","setRain","Wind","setWind","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","temperature","flexDirection","marginTop","temperatureText","color","fontSize","refreshButton","position","margin","alignSelf","cardView","cardInfo","borderRadius","width","height","cardInfoText","fontWeight","cardInfoView","flexWrap","themeButton","marginLeft","justifyContent","squareButton","marginRight","circleButton"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport publicIP from 'react-native-public-ip';\nimport axios from 'axios';\n// Icons\nimport { Feather, EvilIcons } from '@expo/vector-icons';\n// Components\nimport MainCard from './components/MainCard';\nimport InfoCard from './components/InfoCard';\n\nexport default async function App() {\n\n  const [darkMode, setDarkMode] = useState(true)\n  const [currentTemperature, setCurrentTemperature] = useState('21')\n  const [location, setLocation] = useState('BR, São Paulo')\n  const [currentHour, setcurrentHour] = useState('13:59')\n\n  \n  const [clientIP, setClientIP] = useState([])\n\n  async function a () {\n    const pIP = await publicIP()\n    setClientIP(pIP)\n    console.log(clientIP)\n  }\n\n  // useEffect(() => {\n  //   const ip = publicIP();\n  //   setClientIP(ip);\n  //   console.log('A')\n  // })\n\n  // publicIP().then(ip => {\n  //   setClientIP(ip)\n  // })\n\n  const [Sensation, setSensation] = useState('27.6')\n  const [Moisture, setMoisture] = useState('77')\n  const [Rain, setRain] = useState('60')\n  const [Wind, setWind] = useState('9.4')\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n      alignItems: 'center',\n    },\n    temperature: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      marginTop: 10,\n    },\n    temperatureText: {\n      color: darkMode ? '#e0e0e0' : 'black',\n      fontSize: 50,\n    },\n    refreshButton: {\n      position: 'absolute',\n      margin: 30,\n      alignSelf: 'flex-start'\n    },\n    cardView: {\n      color: darkMode ? 'black' : 'white',\n      margin: 10,\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    cardInfo: {\n      alignItems: 'center',\n      backgroundColor: darkMode ? '#393e54' : '#8f8f8f',\n      borderRadius: 20,\n      width: 370,\n      height: 230,\n    },\n    cardInfoText: {\n      color: darkMode ? '#e0e0e0' : 'white',\n      margin: 15,\n      fontSize: 20,\n      fontWeight: 'bold',\n    },\n    cardInfoView: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n    },\n    themeButton: {\n      margin: 10,\n      marginLeft: 300,\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: 50,\n      height: 50,\n      borderRadius: 25,\n    },\n    squareButton: {\n      backgroundColor: darkMode ? '#f2f2f2' : '#8f8f8f',\n      justifyContent: 'center',\n      borderRadius: 20,\n      marginRight: 20,\n      width: 50,\n      height: 25,\n    },\n    circleButton: {\n      backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n      alignSelf: darkMode ? 'flex-end' : 'flex-start',\n      margin: 5,\n      width: 20,\n      height: 20,\n      borderRadius: 50,\n    },\n  });\n\n  return (\n    <View style={styles.container}>\n\n      <TouchableOpacity style={styles.refreshButton}>\n        <EvilIcons name=\"refresh\" size={30} color={darkMode ? 'white' : 'black'} />\n      </TouchableOpacity>\n\n      <Feather name=\"sun\" style={{ marginTop: 55 }} size={40} color=\"orange\" />\n\n      <View style={styles.temperature}>\n        <Text style={styles.temperatureText}>{currentTemperature}</Text>\n        <Text style={[styles.temperatureText, { fontSize: 14 }]}>°C</Text>\n      </View>\n\n      <Text style={[styles.temperatureText, { fontSize: 14 }]}>{location} | {currentHour}</Text>\n\n      <View style={styles.cardView}>\n        <MainCard title={'Manhã'} temperature={'22'} backgroundColor={darkMode ? '#ff873d' : '#cc6e30'} icon={'morning'}></MainCard>\n        <MainCard title={'Tarde'} temperature={'32'} backgroundColor={darkMode ? '#d29600' : '#fcc63f'} icon={'afternoon'}></MainCard>\n        <MainCard title={'Noite'} temperature={'27'} backgroundColor={darkMode ? '#008081' : '#38b7b8'} icon={'night'}></MainCard>\n      </View>\n\n      <View style={styles.cardInfo}>\n        <Text style={styles.cardInfoText}>Informações adicionais</Text>\n\n        <View style={styles.cardInfoView}>\n          <InfoCard title={'Sensação'} value={Sensation + '°C'}></InfoCard>\n          <InfoCard title={'Umidade'} value={Moisture + '%'}></InfoCard>\n          <InfoCard title={'Proba. de chuva'} value={Rain + '%'}></InfoCard>\n          <InfoCard title={'Vel. do vento'} value={Wind + 'km/h'}></InfoCard>\n        </View>\n\n      </View>\n\n      <View style={styles.themeButton}>\n        <View style={styles.squareButton}>\n          <TouchableOpacity style={styles.circleButton} onPress={() => darkMode ? setDarkMode(false) : setDarkMode(true)}>\n\n          </TouchableOpacity>\n        </View>\n\n      </View>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}