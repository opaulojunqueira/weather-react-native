{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function getConsultApi() {\n  var axios, Location, date, Hours, result, latitude, longitude;\n  return _regeneratorRuntime.async(function getConsultApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          axios = require('axios');\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n\n        case 3:\n          Location = _context2.sent;\n          date = new Date();\n          Hours = date.getHours() + ':' + date.getMinutes();\n          result = [];\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Location.data.latitude);\n\n        case 9:\n          latitude = _context2.sent;\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(Location.data.longitude);\n\n        case 12:\n          longitude = _context2.sent;\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap(axios.get(\"http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=\" + latitude + \",\" + longitude + \"&days=1&api=yes\").then(function _callee(res) {\n            var data, manha, tarde, Temperature, Sensation, Humidity, City, Country;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(res.data);\n\n                  case 2:\n                    data = _context.sent;\n                    manha = (data.forecast.forecastday[0].hour[6].temp_c + data.forecast.forecastday[0].hour[7].temp_c + data.forecast.forecastday[0].hour[8].temp_c + data.forecast.forecastday[0].hour[9].temp_c + data.forecast.forecastday[0].hour[10].temp_c + data.forecast.forecastday[0].hour[11].temp_c + data.forecast.forecastday[0].hour[12].temp_c) / 7;\n                    tarde = (data.forecast.forecastday[0].hour[12].temp_c + data.forecast.forecastday[0].hour[13].temp_c + data.forecast.forecastday[0].hour[14].temp_c + data.forecast.forecastday[0].hour[15].temp_c + data.forecast.forecastday[0].hour[16].temp_c + data.forecast.forecastday[0].hour[17].temp_c + data.forecast.forecastday[0].hour[18].temp_c) / 7;\n                    Temperature = res.data.current;\n                    Sensation = data.feelslike_c;\n                    Humidity = data.humidity;\n                    City = Location.data.city;\n                    Country = Location.data.country_code;\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 15:\n          return _context2.abrupt(\"return\", result);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/Projetos/ClimaApp/ClimaApp/api/ConsultApi.js"],"names":["getConsultApi","axios","require","get","Location","date","Date","Hours","getHours","getMinutes","result","data","latitude","longitude","then","res","manha","forecast","forecastday","hour","temp_c","tarde","Temperature","current","Sensation","feelslike_c","Humidity","humidity","City","city","Country","country_code"],"mappings":"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","sourcesContent":["export default async function getConsultApi() {\r\n\r\n    const axios = require('axios');\r\n\r\n    const Location = await axios.get('https://geolocation-db.com/json/')\r\n\r\n    let date = new Date()\r\n    const Hours = date.getHours() + ':' + date.getMinutes()\r\n\r\n    var result = []\r\n\r\n    const latitude = await Location.data.latitude\r\n    const longitude = await Location.data.longitude\r\n\r\n    await axios.get(`http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=${latitude},${longitude}&days=1&api=yes`)\r\n        .then(async (res) => {\r\n            const data = await res.data\r\n\r\n\r\n\r\n            /*    manha1 = ,\r\n                manha2 = data.forecast.forecastday[0].hour[7].temp_c,\r\n                manha3 = data.forecast.forecastday[0].hour[8].temp_c,\r\n                manha4 = data.forecast.forecastday[0].hour[9].temp_c,\r\n                manha5 = data.forecast.forecastday[0].hour[10].temp_c,\r\n                manha6 = data.forecast.forecastday[0].hour[11].temp_c,\r\n                manha7 = data.forecast.forecastday[0].hour[12].temp_c,\r\n                tarde1 = data.forecast.forecastday[0].hour[12].temp_c,\r\n                tarde2 = data.forecast.forecastday[0].hour[13].temp_c,\r\n                tarde3 = data.forecast.forecastday[0].hour[14].temp_c,\r\n                tarde4 = data.forecast.forecastday[0].hour[15].temp_c,\r\n                tarde5 = data.forecast.forecastday[0].hour[16].temp_c,\r\n                tarde6 = data.forecast.forecastday[0].hour[17].temp_c,\r\n                tarde7 = data.forecast.forecastday[0].hour[18].temp_c,\r\n                noite1 = data.forecast.forecastday[0].hour[18].temp_c,\r\n                noite2 = data.forecast.forecastday[0].hour[19].temp_c,\r\n                noite3 = data.forecast.forecastday[0].hour[20].temp_c,\r\n                noite4 = data.forecast.forecastday[0].hour[21].temp_c,\r\n                noite5 = data.forecast.forecastday[0].hour[22].temp_c,\r\n                noite6 = data.forecast.forecastday[0].hour[23].temp_c,\r\n                noite7 = data.forecast.forecastday[0].hour[24].temp_c*/\r\n\r\n\r\n\r\n\r\n            let manha = (data.forecast.forecastday[0].hour[6].temp_c\r\n                + data.forecast.forecastday[0].hour[7].temp_c\r\n                + data.forecast.forecastday[0].hour[8].temp_c\r\n                + data.forecast.forecastday[0].hour[9].temp_c\r\n                + data.forecast.forecastday[0].hour[10].temp_c\r\n                + data.forecast.forecastday[0].hour[11].temp_c\r\n                + data.forecast.forecastday[0].hour[12].temp_c)\r\n                / 7\r\n\r\n            let tarde = (data.forecast.forecastday[0].hour[12].temp_c\r\n                + data.forecast.forecastday[0].hour[13].temp_c\r\n                + data.forecast.forecastday[0].hour[14].temp_c\r\n                + data.forecast.forecastday[0].hour[15].temp_c\r\n                + data.forecast.forecastday[0].hour[16].temp_c\r\n                + data.forecast.forecastday[0].hour[17].temp_c\r\n                + data.forecast.forecastday[0].hour[18].temp_c)\r\n                / 7;\r\n\r\n            // let noite = (data.forecast.forecastday[0].hour[18].temp_c\r\n            //     + data.forecast.forecastday[0].hour[19].temp_c\r\n            //     + data.forecast.forecastday[0].hour[20].temp_c\r\n            //     + data.forecast.forecastday[0].hour[21].temp_c\r\n            //     + data.forecast.forecastday[0].hour[22].temp_c\r\n            //     + data.forecast.forecastday[0].hour[23].temp_c\r\n            //     + data.forecast.forecastday[0].hour[24].temp_c)\r\n            //     / 7;\r\n\r\n           // console.log('Manh√£: ' + manha + ' Tarde: ' + tarde + ' Noite: ' )\r\n\r\n            const Temperature = res.data.current\r\n            const Sensation = data.feelslike_c\r\n            const Humidity = data.humidity\r\n            // const TemperatureMin = data.main.temp_min\r\n            // const TemperatureMax = data.main.temp_max\r\n            const City = Location.data.city\r\n            const Country = Location.data.country_code\r\n\r\n            // Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, Sensation, Wind\r\n            // result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, Sensation, Humidity]\r\n        })\r\n\r\n    return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}