{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport publicIP from 'react-native-public-ip';\nimport { Feather, EvilIcons } from '@expo/vector-icons';\nimport MainCard from \"./components/MainCard\";\nimport InfoCard from \"./components/InfoCard\";\nimport getCurrentWeather from \"./api/ConsultApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      darkMode = _useState2[0],\n      setDarkMode = _useState2[1];\n\n  var _useState3 = useState('21'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentTemperature = _useState4[0],\n      setCurrentTemperature = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      locationView = _useState6[0],\n      setLocationView = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      location = _useState8[0],\n      setLocation = _useState8[1];\n\n  var _useState9 = useState('13:59'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentHour = _useState10[0],\n      setcurrentHour = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      clientIP = _useState12[0],\n      setClientIP = _useState12[1];\n\n  var getData = function getData() {\n    var res;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n\n          case 2:\n            res = _context.sent;\n            console.log(res.data);\n            setLocation(res.data.city);\n            setLocationView(res.data.country_code + ', ' + res.data.city);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log('Location: ' + location);\n  useEffect(function () {\n    getData();\n    getCurrentWeather(location);\n  }, []);\n\n  var _useState13 = useState('27.6'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      Sensation = _useState14[0],\n      setSensation = _useState14[1];\n\n  var _useState15 = useState('77'),\n      _useState16 = _slicedToArray(_useState15, 2),\n      Moisture = _useState16[0],\n      setMoisture = _useState16[1];\n\n  var _useState17 = useState('60'),\n      _useState18 = _slicedToArray(_useState17, 2),\n      Rain = _useState18[0],\n      setRain = _useState18[1];\n\n  var _useState19 = useState('9.4'),\n      _useState20 = _slicedToArray(_useState19, 2),\n      Wind = _useState20[0],\n      setWind = _useState20[1];\n\n  var styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n      alignItems: 'center'\n    },\n    temperature: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      marginTop: 10\n    },\n    temperatureText: {\n      color: darkMode ? '#e0e0e0' : 'black',\n      fontSize: 50\n    },\n    refreshButton: {\n      position: 'absolute',\n      margin: 30,\n      alignSelf: 'flex-start'\n    },\n    cardView: {\n      color: darkMode ? 'black' : 'white',\n      margin: 10,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    cardInfo: {\n      alignItems: 'center',\n      backgroundColor: darkMode ? '#393e54' : '#8f8f8f',\n      borderRadius: 20,\n      width: 370,\n      height: 230\n    },\n    cardInfoText: {\n      color: darkMode ? '#e0e0e0' : 'white',\n      margin: 15,\n      fontSize: 20,\n      fontWeight: 'bold'\n    },\n    cardInfoView: {\n      flexDirection: 'row',\n      flexWrap: 'wrap'\n    },\n    themeButton: {\n      margin: 10,\n      marginLeft: 300,\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: 50,\n      height: 50,\n      borderRadius: 25\n    },\n    squareButton: {\n      backgroundColor: darkMode ? '#f2f2f2' : '#8f8f8f',\n      justifyContent: 'center',\n      borderRadius: 20,\n      marginRight: 20,\n      width: 50,\n      height: 25\n    },\n    circleButton: {\n      backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n      alignSelf: darkMode ? 'flex-end' : 'flex-start',\n      margin: 5,\n      width: 20,\n      height: 20,\n      borderRadius: 50\n    }\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TouchableOpacity, {\n      style: styles.refreshButton,\n      children: _jsx(EvilIcons, {\n        name: \"refresh\",\n        size: 30,\n        color: darkMode ? 'white' : 'black'\n      })\n    }), _jsx(Feather, {\n      name: \"sun\",\n      style: {\n        marginTop: 55\n      },\n      size: 40,\n      color: \"orange\"\n    }), _jsxs(View, {\n      style: styles.temperature,\n      children: [_jsx(Text, {\n        style: styles.temperatureText,\n        children: currentTemperature\n      }), _jsx(Text, {\n        style: [styles.temperatureText, {\n          fontSize: 14\n        }],\n        children: \"\\xB0C\"\n      })]\n    }), _jsxs(Text, {\n      style: [styles.temperatureText, {\n        fontSize: 14\n      }],\n      children: [locationView, \" | \", currentHour]\n    }), _jsxs(View, {\n      style: styles.cardView,\n      children: [_jsx(MainCard, {\n        title: 'Manhã',\n        temperature: '22',\n        backgroundColor: darkMode ? '#ff873d' : '#cc6e30',\n        icon: 'morning'\n      }), _jsx(MainCard, {\n        title: 'Tarde',\n        temperature: '32',\n        backgroundColor: darkMode ? '#d29600' : '#fcc63f',\n        icon: 'afternoon'\n      }), _jsx(MainCard, {\n        title: 'Noite',\n        temperature: '27',\n        backgroundColor: darkMode ? '#008081' : '#38b7b8',\n        icon: 'night'\n      })]\n    }), _jsxs(View, {\n      style: styles.cardInfo,\n      children: [_jsx(Text, {\n        style: styles.cardInfoText,\n        children: \"Informa\\xE7\\xF5es adicionais\"\n      }), _jsxs(View, {\n        style: styles.cardInfoView,\n        children: [_jsx(InfoCard, {\n          title: 'Sensação',\n          value: Sensation + '°C'\n        }), _jsx(InfoCard, {\n          title: 'Umidade',\n          value: Moisture + '%'\n        }), _jsx(InfoCard, {\n          title: 'Proba. de chuva',\n          value: Rain + '%'\n        }), _jsx(InfoCard, {\n          title: 'Vel. do vento',\n          value: Wind + 'km/h'\n        })]\n      })]\n    }), _jsx(View, {\n      style: styles.themeButton,\n      children: _jsx(View, {\n        style: styles.squareButton,\n        children: _jsx(TouchableOpacity, {\n          style: styles.circleButton,\n          onPress: function onPress() {\n            return darkMode ? setDarkMode(false) : setDarkMode(true);\n          }\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"sources":["D:/Projetos/ClimaApp/ClimaApp/App.js"],"names":["StatusBar","useState","useEffect","axios","publicIP","Feather","EvilIcons","MainCard","InfoCard","getCurrentWeather","App","darkMode","setDarkMode","currentTemperature","setCurrentTemperature","locationView","setLocationView","location","setLocation","currentHour","setcurrentHour","clientIP","setClientIP","getData","get","res","console","log","data","city","country_code","Sensation","setSensation","Moisture","setMoisture","Rain","setRain","Wind","setWind","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","temperature","flexDirection","marginTop","temperatureText","color","fontSize","refreshButton","position","margin","alignSelf","cardView","cardInfo","borderRadius","width","height","cardInfoText","fontWeight","cardInfoView","flexWrap","themeButton","marginLeft","justifyContent","squareButton","marginRight","circleButton"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport publicIP from 'react-native-public-ip';\n// Icons\nimport { Feather, EvilIcons } from '@expo/vector-icons';\n// Components\nimport MainCard from './components/MainCard';\nimport InfoCard from './components/InfoCard';\n// Api\nimport getCurrentWeather from './api/ConsultApi';\n\nexport default function App() {\n\n  const [darkMode, setDarkMode] = useState(true)\n\n  const [currentTemperature, setCurrentTemperature] = useState('21')\n  const [locationView, setLocationView] = useState([])\n  const [location, setLocation] = useState([])\n  const [currentHour, setcurrentHour] = useState('13:59')\n\n  const [clientIP, setClientIP] = useState([]) //publicIP\n\n  const getData = async () => {\n    const res = await axios.get('https://geolocation-db.com/json/')\n    console.log(res.data);\n    setLocation(res.data.city)\n    setLocationView(res.data.country_code + ', ' + res.data.city)\n  }\n\n  console.log('Location: ' + location)\n\n  useEffect(() => {\n    getData()\n    getCurrentWeather(location)\n  }, [])\n\n  // useEffect(() => {\n  //   const ip = publicIP();\n  //   setClientIP(ip);\n  //   console.log('A')\n  // })\n\n  // publicIP().then(ip => {\n  //   setClientIP(ip)\n  // })\n\n  const [Sensation, setSensation] = useState('27.6')\n  const [Moisture, setMoisture] = useState('77')\n  const [Rain, setRain] = useState('60')\n  const [Wind, setWind] = useState('9.4')\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n      alignItems: 'center',\n    },\n    temperature: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      marginTop: 10,\n    },\n    temperatureText: {\n      color: darkMode ? '#e0e0e0' : 'black',\n      fontSize: 50,\n    },\n    refreshButton: {\n      position: 'absolute',\n      margin: 30,\n      alignSelf: 'flex-start'\n    },\n    cardView: {\n      color: darkMode ? 'black' : 'white',\n      margin: 10,\n      flexDirection: 'row',\n      alignItems: 'center',\n    },\n    cardInfo: {\n      alignItems: 'center',\n      backgroundColor: darkMode ? '#393e54' : '#8f8f8f',\n      borderRadius: 20,\n      width: 370,\n      height: 230,\n    },\n    cardInfoText: {\n      color: darkMode ? '#e0e0e0' : 'white',\n      margin: 15,\n      fontSize: 20,\n      fontWeight: 'bold',\n    },\n    cardInfoView: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n    },\n    themeButton: {\n      margin: 10,\n      marginLeft: 300,\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: 50,\n      height: 50,\n      borderRadius: 25,\n    },\n    squareButton: {\n      backgroundColor: darkMode ? '#f2f2f2' : '#8f8f8f',\n      justifyContent: 'center',\n      borderRadius: 20,\n      marginRight: 20,\n      width: 50,\n      height: 25,\n    },\n    circleButton: {\n      backgroundColor: darkMode ? '#232634' : '#f2f2f2',\n      alignSelf: darkMode ? 'flex-end' : 'flex-start',\n      margin: 5,\n      width: 20,\n      height: 20,\n      borderRadius: 50,\n    },\n  });\n\n  return (\n    <View style={styles.container}>\n\n      <TouchableOpacity style={styles.refreshButton}>\n        <EvilIcons name=\"refresh\" size={30} color={darkMode ? 'white' : 'black'} />\n      </TouchableOpacity>\n\n      <Feather name=\"sun\" style={{ marginTop: 55 }} size={40} color=\"orange\" />\n\n      <View style={styles.temperature}>\n        <Text style={styles.temperatureText}>{currentTemperature}</Text>\n        <Text style={[styles.temperatureText, { fontSize: 14 }]}>°C</Text>\n      </View>\n\n      <Text style={[styles.temperatureText, { fontSize: 14 }]}>{locationView} | {currentHour}</Text>\n\n      <View style={styles.cardView}>\n        <MainCard title={'Manhã'} temperature={'22'} backgroundColor={darkMode ? '#ff873d' : '#cc6e30'} icon={'morning'}></MainCard>\n        <MainCard title={'Tarde'} temperature={'32'} backgroundColor={darkMode ? '#d29600' : '#fcc63f'} icon={'afternoon'}></MainCard>\n        <MainCard title={'Noite'} temperature={'27'} backgroundColor={darkMode ? '#008081' : '#38b7b8'} icon={'night'}></MainCard>\n      </View>\n\n      <View style={styles.cardInfo}>\n        <Text style={styles.cardInfoText}>Informações adicionais</Text>\n\n        <View style={styles.cardInfoView}>\n          <InfoCard title={'Sensação'} value={Sensation + '°C'}></InfoCard>\n          <InfoCard title={'Umidade'} value={Moisture + '%'}></InfoCard>\n          <InfoCard title={'Proba. de chuva'} value={Rain + '%'}></InfoCard>\n          <InfoCard title={'Vel. do vento'} value={Wind + 'km/h'}></InfoCard>\n        </View>\n\n      </View>\n\n      <View style={styles.themeButton}>\n        <View style={styles.squareButton}>\n          <TouchableOpacity style={styles.circleButton} onPress={() => darkMode ? setDarkMode(false) : setDarkMode(true)}>\n\n          </TouchableOpacity>\n        </View>\n\n      </View>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}