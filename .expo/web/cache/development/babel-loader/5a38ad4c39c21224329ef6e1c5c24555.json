{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function getConsultApi() {\n  var axios, Location, date, Hours, result, latitude, longitude;\n  return _regeneratorRuntime.async(function getConsultApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          axios = require('axios');\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n\n        case 3:\n          Location = _context2.sent;\n          date = new Date();\n          Hours = date.getHours() + ':' + date.getMinutes();\n          result = [];\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Location.data.latitude);\n\n        case 9:\n          latitude = _context2.sent;\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(Location.data.longitude);\n\n        case 12:\n          longitude = _context2.sent;\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap(axios.get(\"http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=\" + latitude + \",\" + longitude + \"&days=1&api=yes\").then(function _callee(res) {\n            var data, manha1, manha2, manha3, manha4, manha5, manha6, manha7, manha, tarde1, tarde2, tarde3, tarde4, tarde5, tarde6, tarde7, tarde, noite1, noite2, noite3, noite4, noite5, noite6, noite7, noite, Temperature, Sensation, Humidity, City, Country;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    data = res.data;\n                    manha1 = data.forecast.forecastday[0].hour[6].temp_c, manha2 = data.forecast.forecastday[0].hour[7].temp_c, manha3 = data.forecast.forecastday[0].hour[8].temp_c, manha4 = data.forecast.forecastday[0].hour[9].temp_c, manha5 = data.forecast.forecastday[0].hour[10].temp_c, manha6 = data.forecast.forecastday[0].hour[11].temp_c, manha7 = data.forecast.forecastday[0].hour[12].temp_c, manha = Math.floor((manha1 + manha2 + manha3 + manha4 + manha5 + manha6 + manha7) / 7);\n                    tarde1 = data.forecast.forecastday[0].hour[12].temp_c, tarde2 = data.forecast.forecastday[0].hour[13].temp_c, tarde3 = data.forecast.forecastday[0].hour[14].temp_c, tarde4 = data.forecast.forecastday[0].hour[15].temp_c, tarde5 = data.forecast.forecastday[0].hour[16].temp_c, tarde6 = data.forecast.forecastday[0].hour[17].temp_c, tarde7 = data.forecast.forecastday[0].hour[18].temp_c, tarde = Math.floor((tarde1 + tarde2 + tarde3 + tarde4 + tarde5 + tarde6 + tarde7) / 7);\n                    noite1 = data.forecast.forecastday[0].hour[18].temp_c, noite2 = data.forecast.forecastday[0].hour[19].temp_c, noite3 = data.forecast.forecastday[0].hour[20].temp_c, noite4 = data.forecast.forecastday[0].hour[21].temp_c, noite5 = data.forecast.forecastday[0].hour[22].temp_c, noite6 = data.forecast.forecastday[0].hour[23].temp_c, noite7 = data.forecast.forecastday[0].hour[24].temp_c, noite = Math.floor(noite1 + noite2 + noite3 + noite);\n                    console.log('ManhÃ£: ' + manha + ' Tarde: ' + tarde);\n                    Temperature = res.data.current;\n                    Sensation = data.feelslike_c;\n                    Humidity = data.humidity;\n                    City = Location.data.city;\n                    Country = Location.data.country_code;\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 15:\n          return _context2.abrupt(\"return\", result);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/Projetos/ClimaApp/ClimaApp/api/ConsultApi.js"],"names":["getConsultApi","axios","require","get","Location","date","Date","Hours","getHours","getMinutes","result","data","latitude","longitude","then","res","manha1","forecast","forecastday","hour","temp_c","manha2","manha3","manha4","manha5","manha6","manha7","manha","Math","floor","tarde1","tarde2","tarde3","tarde4","tarde5","tarde6","tarde7","tarde","noite1","noite2","noite3","noite4","noite5","noite6","noite7","noite","console","log","Temperature","current","Sensation","feelslike_c","Humidity","humidity","City","city","Country","country_code"],"mappings":"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","sourcesContent":["export default async function getConsultApi() {\r\n\r\n    const axios = require('axios');\r\n\r\n    const Location = await axios.get('https://geolocation-db.com/json/')\r\n\r\n    let date = new Date()\r\n    const Hours = date.getHours() + ':' + date.getMinutes()\r\n\r\n    var result = []\r\n\r\n    const latitude = await Location.data.latitude\r\n    const longitude = await Location.data.longitude\r\n\r\n    await axios.get(`http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=${latitude},${longitude}&days=1&api=yes`)\r\n        .then(async (res) => {\r\n            const data = res.data\r\n\r\n            var manha1 = data.forecast.forecastday[0].hour[6].temp_c,\r\n                manha2 = data.forecast.forecastday[0].hour[7].temp_c,\r\n                manha3 = data.forecast.forecastday[0].hour[8].temp_c,\r\n                manha4 = data.forecast.forecastday[0].hour[9].temp_c,\r\n                manha5 = data.forecast.forecastday[0].hour[10].temp_c,\r\n                manha6 = data.forecast.forecastday[0].hour[11].temp_c,\r\n                manha7 = data.forecast.forecastday[0].hour[12].temp_c,\r\n                manha = Math.floor((manha1 + manha2 + manha3 + manha4 + manha5 + manha6 + manha7) / 7)\r\n\r\n            var tarde1 = data.forecast.forecastday[0].hour[12].temp_c,\r\n                tarde2 = data.forecast.forecastday[0].hour[13].temp_c,\r\n                tarde3 = data.forecast.forecastday[0].hour[14].temp_c,\r\n                tarde4 = data.forecast.forecastday[0].hour[15].temp_c,\r\n                tarde5 = data.forecast.forecastday[0].hour[16].temp_c,\r\n                tarde6 = data.forecast.forecastday[0].hour[17].temp_c,\r\n                tarde7 = data.forecast.forecastday[0].hour[18].temp_c,\r\n                tarde = Math.floor((tarde1 + tarde2 + tarde3 + tarde4 + tarde5 + tarde6 + tarde7) / 7)\r\n\r\n            var noite1 = data.forecast.forecastday[0].hour[18].temp_c,\r\n                noite2 = data.forecast.forecastday[0].hour[19].temp_c,\r\n                noite3 = data.forecast.forecastday[0].hour[20].temp_c,\r\n                noite4 = data.forecast.forecastday[0].hour[21].temp_c,\r\n                noite5 = data.forecast.forecastday[0].hour[22].temp_c,\r\n                noite6 = data.forecast.forecastday[0].hour[23].temp_c,\r\n                noite7 = data.forecast.forecastday[0].hour[24].temp_c,\r\n                noite = Math.floor((noite1 + noite2 + noite3 + noite))\r\n\r\n                console.log('ManhÃ£: ' + manha + ' Tarde: ' + tarde)\r\n\r\n            const Temperature = res.data.current\r\n            const Sensation = data.feelslike_c\r\n            const Humidity = data.humidity\r\n            // const TemperatureMin = data.main.temp_min\r\n            // const TemperatureMax = data.main.temp_max\r\n            const City = Location.data.city\r\n            const Country = Location.data.country_code\r\n\r\n            // Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, Sensation, Wind\r\n            // result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, Sensation, Humidity]\r\n        })\r\n\r\n    return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}