{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function getConsultApi() {\n  var axios, Location, date, Hours, result, latitude, longitude;\n  return _regeneratorRuntime.async(function getConsultApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          axios = require('axios');\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n\n        case 3:\n          Location = _context2.sent;\n          date = new Date();\n          Hours = date.getHours() + ':' + date.getMinutes();\n          result = [];\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Location.data.latitude);\n\n        case 9:\n          latitude = _context2.sent;\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(Location.data.longitude);\n\n        case 12:\n          longitude = _context2.sent;\n          console.log(\"http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=\" + latitude + \",\" + longitude + \"&days=1&api=yes\");\n          _context2.next = 16;\n          return _regeneratorRuntime.awrap(axios.get(\"http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=\" + latitude + \",\" + longitude + \"&days=1&api=yes\").then(function _callee(res) {\n            var data, manha, tarde, noite, Temperature, TemperatureMorning, TemperatureEvening, TemperatureNight, TemperatureMin, TemperatureMax, Rain, Humidity, City, Country;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(res.data);\n\n                  case 2:\n                    data = _context.sent;\n                    console.log(data.current.condition);\n                    manha = (data.forecast.forecastday[0].hour[6].temp_c + data.forecast.forecastday[0].hour[7].temp_c + data.forecast.forecastday[0].hour[8].temp_c + data.forecast.forecastday[0].hour[9].temp_c + data.forecast.forecastday[0].hour[10].temp_c + data.forecast.forecastday[0].hour[11].temp_c + data.forecast.forecastday[0].hour[12].temp_c) / 7;\n                    _context.next = 7;\n                    return _regeneratorRuntime.awrap(data.forecast.forecastday[0].hour[12].temp_c + data.forecast.forecastday[0].hour[13].temp_c + data.forecast.forecastday[0].hour[14].temp_c + data.forecast.forecastday[0].hour[15].temp_c + data.forecast.forecastday[0].hour[16].temp_c + data.forecast.forecastday[0].hour[17].temp_c + data.forecast.forecastday[0].hour[18].temp_c);\n\n                  case 7:\n                    _context.t0 = _context.sent;\n                    tarde = _context.t0 / 7;\n                    noite = (data.forecast.forecastday[0].hour[19].temp_c + data.forecast.forecastday[0].hour[19].temp_c + data.forecast.forecastday[0].hour[20].temp_c + data.forecast.forecastday[0].hour[21].temp_c + data.forecast.forecastday[0].hour[22].temp_c + data.forecast.forecastday[0].hour[23].temp_c + data.forecast.forecastday[0].hour[0].temp_c) / 7;\n                    Temperature = res.data.current.temp_c;\n                    TemperatureMorning = Math.floor(manha);\n                    TemperatureEvening = Math.floor(tarde);\n                    TemperatureNight = Math.floor(noite);\n                    TemperatureMin = data.forecast.forecastday[0].day.mintemp_c;\n                    TemperatureMax = data.forecast.forecastday[0].day.maxtemp_c;\n                    Rain = data.forecast.forecastday[0].day.daily_chance_of_rain;\n                    Humidity = data.current.humidity;\n                    City = Location.data.city;\n                    Country = Location.data.country_code;\n                    result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Humidity];\n\n                  case 21:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 16:\n          return _context2.abrupt(\"return\", result);\n\n        case 17:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/Projetos/ClimaApp/ClimaApp/api/ConsultApi.js"],"names":["getConsultApi","axios","require","get","Location","date","Date","Hours","getHours","getMinutes","result","data","latitude","longitude","console","log","then","res","current","condition","manha","forecast","forecastday","hour","temp_c","tarde","noite","Temperature","TemperatureMorning","Math","floor","TemperatureEvening","TemperatureNight","TemperatureMin","day","mintemp_c","TemperatureMax","maxtemp_c","Rain","daily_chance_of_rain","Humidity","humidity","City","city","Country","country_code"],"mappings":"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","sourcesContent":["export default async function getConsultApi() {\r\n\r\n    const axios = require('axios');\r\n\r\n    const Location = await axios.get('https://geolocation-db.com/json/')\r\n\r\n    let date = new Date()\r\n    const Hours = date.getHours() + ':' + date.getMinutes()\r\n\r\n    var result = []\r\n\r\n    const latitude = await Location.data.latitude\r\n    const longitude = await Location.data.longitude\r\n\r\n    console.log(`http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=${latitude},${longitude}&days=1&api=yes`)\r\n    await axios.get(`http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=${latitude},${longitude}&days=1&api=yes`)\r\n        .then(async (res) => {\r\n            const data = await res.data\r\n\r\n            console.log(data.current.condition)\r\n\r\n            let manha = (data.forecast.forecastday[0].hour[6].temp_c\r\n                + data.forecast.forecastday[0].hour[7].temp_c\r\n                + data.forecast.forecastday[0].hour[8].temp_c\r\n                + data.forecast.forecastday[0].hour[9].temp_c\r\n                + data.forecast.forecastday[0].hour[10].temp_c\r\n                + data.forecast.forecastday[0].hour[11].temp_c\r\n                + data.forecast.forecastday[0].hour[12].temp_c)\r\n                / 7\r\n\r\n            let tarde = await (data.forecast.forecastday[0].hour[12].temp_c\r\n                + data.forecast.forecastday[0].hour[13].temp_c\r\n                + data.forecast.forecastday[0].hour[14].temp_c\r\n                + data.forecast.forecastday[0].hour[15].temp_c\r\n                + data.forecast.forecastday[0].hour[16].temp_c\r\n                + data.forecast.forecastday[0].hour[17].temp_c\r\n                + data.forecast.forecastday[0].hour[18].temp_c)\r\n                / 7\r\n\r\n            let noite = (data.forecast.forecastday[0].hour[19].temp_c\r\n                + data.forecast.forecastday[0].hour[19].temp_c\r\n                + data.forecast.forecastday[0].hour[20].temp_c\r\n                + data.forecast.forecastday[0].hour[21].temp_c\r\n                + data.forecast.forecastday[0].hour[22].temp_c\r\n                + data.forecast.forecastday[0].hour[23].temp_c\r\n                + data.forecast.forecastday[0].hour[0].temp_c)\r\n                / 7;\r\n\r\n            const Temperature = res.data.current.temp_c\r\n            const TemperatureMorning = Math.floor(manha)\r\n            const TemperatureEvening = Math.floor(tarde)\r\n            const TemperatureNight = Math.floor(noite)\r\n            const TemperatureMin = data.forecast.forecastday[0].day.mintemp_c\r\n            const TemperatureMax = data.forecast.forecastday[0].day.maxtemp_c\r\n            const Rain = data.forecast.forecastday[0].day.daily_chance_of_rain\r\n            const Humidity = data.current.humidity\r\n            const City = Location.data.city\r\n            const Country = Location.data.country_code\r\n\r\n            // Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Wind\r\n            result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, TemperatureMorning, TemperatureEvening, TemperatureNight, Rain, Humidity]\r\n        })\r\n\r\n    return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}