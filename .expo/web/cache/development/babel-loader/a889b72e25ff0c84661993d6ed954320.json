{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function getConsultApi() {\n  var axios, Location, date, Hours, result, latitude, longitude;\n  return _regeneratorRuntime.async(function getConsultApi$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          axios = require('axios');\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.get('https://geolocation-db.com/json/'));\n\n        case 3:\n          Location = _context2.sent;\n          date = new Date();\n          Hours = date.getHours() + ':' + date.getMinutes();\n          result = [];\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Location.data.latitude);\n\n        case 9:\n          latitude = _context2.sent;\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(Location.data.longitude);\n\n        case 12:\n          longitude = _context2.sent;\n          _context2.next = 15;\n          return _regeneratorRuntime.awrap(axios.get(\"http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=\" + latitude + \",\" + longitude + \"&days=1&api=yes\").then(function _callee(res) {\n            var data, Temperature, Sensation, Humidity, City, Country;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    data = res.data;\n                    console.log(data.forecast.forecastday[0].hour[6].temp_c);\n                    console.log(data.forecast.forecastday[0].hour[7].temp_c);\n                    console.log(data.forecast.forecastday[0].hour[8].temp_c);\n                    console.log(data.forecast.forecastday[0].hour[9].temp_c);\n                    console.log(data.forecast.forecastday[0].hour[10].temp_c);\n                    console.log(data.forecast.forecastday[0].hour[11].temp_c);\n                    console.log(data.forecast.forecastday[0].hour[12].temp_c);\n                    Temperature = res.data.current;\n                    Sensation = data.feelslike_c;\n                    Humidity = data.humidity;\n                    City = Location.data.city;\n                    Country = Location.data.country_code;\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 15:\n          return _context2.abrupt(\"return\", result);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["D:/Projetos/ClimaApp/ClimaApp/api/ConsultApi.js"],"names":["getConsultApi","axios","require","get","Location","date","Date","Hours","getHours","getMinutes","result","data","latitude","longitude","then","res","console","log","forecast","forecastday","hour","temp_c","Temperature","current","Sensation","feelslike_c","Humidity","humidity","City","city","Country","country_code"],"mappings":";AAAA,eAAe,SAAeA,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,UAAAA,KAFK,GAEGC,OAAO,CAAC,OAAD,CAFV;AAAA;AAAA,2CAIYD,KAAK,CAACE,GAAN,CAAU,kCAAV,CAJZ;;AAAA;AAILC,UAAAA,QAJK;AAMPC,UAAAA,IANO,GAMA,IAAIC,IAAJ,EANA;AAOLC,UAAAA,KAPK,GAOGF,IAAI,CAACG,QAAL,KAAkB,GAAlB,GAAwBH,IAAI,CAACI,UAAL,EAP3B;AASPC,UAAAA,MATO,GASE,EATF;AAAA;AAAA,2CAWYN,QAAQ,CAACO,IAAT,CAAcC,QAX1B;;AAAA;AAWLA,UAAAA,QAXK;AAAA;AAAA,2CAYaR,QAAQ,CAACO,IAAT,CAAcE,SAZ3B;;AAAA;AAYLA,UAAAA,SAZK;AAAA;AAAA,2CAcLZ,KAAK,CAACE,GAAN,uFAA8FS,QAA9F,SAA0GC,SAA1G,sBACDC,IADC,CACI,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACIJ,oBAAAA,IADJ,GACWI,GAAG,CAACJ,IADf;AAEFK,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,CAAlC,EAAqCC,MAAjD;AACAL,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,CAAlC,EAAqCC,MAAjD;AACAL,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,CAAlC,EAAqCC,MAAjD;AACAL,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,CAAlC,EAAqCC,MAAjD;AACAL,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,EAAlC,EAAsCC,MAAlD;AACAL,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,EAAlC,EAAsCC,MAAlD;AACAL,oBAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6BC,IAA7B,CAAkC,EAAlC,EAAsCC,MAAlD;AAIMC,oBAAAA,WAZJ,GAYkBP,GAAG,CAACJ,IAAJ,CAASY,OAZ3B;AAaIC,oBAAAA,SAbJ,GAagBb,IAAI,CAACc,WAbrB;AAcIC,oBAAAA,QAdJ,GAcef,IAAI,CAACgB,QAdpB;AAiBIC,oBAAAA,IAjBJ,GAiBWxB,QAAQ,CAACO,IAAT,CAAckB,IAjBzB;AAkBIC,oBAAAA,OAlBJ,GAkBc1B,QAAQ,CAACO,IAAT,CAAcoB,YAlB5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAdK;;AAAA;AAAA,4CAuCJrB,MAvCI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export default async function getConsultApi() {\r\n\r\n    const axios = require('axios');\r\n\r\n    const Location = await axios.get('https://geolocation-db.com/json/')\r\n\r\n    let date = new Date()\r\n    const Hours = date.getHours() + ':' + date.getMinutes()\r\n\r\n    var result = []\r\n\r\n    const latitude = await Location.data.latitude\r\n    const longitude = await Location.data.longitude\r\n\r\n    await axios.get(`http://api.weatherapi.com/v1/forecast.json?key=94feab36963245679cb201951220801&q=${latitude},${longitude}&days=1&api=yes`)\r\n        .then(async(res) => {\r\n            const data = res.data\r\n            console.log(data.forecast.forecastday[0].hour[6].temp_c) // data.forecast.forecastday[0].hour[6] - 06:00 AM\r\n            console.log(data.forecast.forecastday[0].hour[7].temp_c) // 07:00 AM\r\n            console.log(data.forecast.forecastday[0].hour[8].temp_c) // 08:00 AM\r\n            console.log(data.forecast.forecastday[0].hour[9].temp_c) // 09:00 AM\r\n            console.log(data.forecast.forecastday[0].hour[10].temp_c) // 10:00 AM\r\n            console.log(data.forecast.forecastday[0].hour[11].temp_c) // 11:00 AM\r\n            console.log(data.forecast.forecastday[0].hour[12].temp_c) // 12:00 AM -> PM\r\n\r\n            \r\n\r\n            const Temperature = res.data.current\r\n            const Sensation = data.feelslike_c\r\n            const Humidity = data.humidity\r\n            // const TemperatureMin = data.main.temp_min\r\n            // const TemperatureMax = data.main.temp_max\r\n            const City = Location.data.city\r\n            const Country = Location.data.country_code\r\n\r\n            // Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, Sensation, Wind\r\n            // result = [Country, City, Hours, Temperature, TemperatureMin, TemperatureMax, Sensation, Humidity]\r\n        })\r\n\r\n    return result\r\n}\r\n"]},"metadata":{},"sourceType":"module"}